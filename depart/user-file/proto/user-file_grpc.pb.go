// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: depart/user-file/proto/user-file.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserFileServiceClient is the client API for UserFileService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserFileServiceClient interface {
	// 保存用户文件
	SaveUserFile(ctx context.Context, in *UserFileReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 删除用户文件
	DeleteUserFile(ctx context.Context, in *UserFileReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type userFileServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserFileServiceClient(cc grpc.ClientConnInterface) UserFileServiceClient {
	return &userFileServiceClient{cc}
}

func (c *userFileServiceClient) SaveUserFile(ctx context.Context, in *UserFileReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/userFileProto.UserFileService/SaveUserFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userFileServiceClient) DeleteUserFile(ctx context.Context, in *UserFileReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/userFileProto.UserFileService/DeleteUserFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserFileServiceServer is the server API for UserFileService service.
// All implementations must embed UnimplementedUserFileServiceServer
// for forward compatibility
type UserFileServiceServer interface {
	// 保存用户文件
	SaveUserFile(context.Context, *UserFileReq) (*emptypb.Empty, error)
	// 删除用户文件
	DeleteUserFile(context.Context, *UserFileReq) (*emptypb.Empty, error)
	mustEmbedUnimplementedUserFileServiceServer()
}

// UnimplementedUserFileServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserFileServiceServer struct {
}

func (UnimplementedUserFileServiceServer) SaveUserFile(context.Context, *UserFileReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveUserFile not implemented")
}
func (UnimplementedUserFileServiceServer) DeleteUserFile(context.Context, *UserFileReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserFile not implemented")
}
func (UnimplementedUserFileServiceServer) mustEmbedUnimplementedUserFileServiceServer() {}

// UnsafeUserFileServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserFileServiceServer will
// result in compilation errors.
type UnsafeUserFileServiceServer interface {
	mustEmbedUnimplementedUserFileServiceServer()
}

func RegisterUserFileServiceServer(s grpc.ServiceRegistrar, srv UserFileServiceServer) {
	s.RegisterService(&UserFileService_ServiceDesc, srv)
}

func _UserFileService_SaveUserFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserFileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserFileServiceServer).SaveUserFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userFileProto.UserFileService/SaveUserFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserFileServiceServer).SaveUserFile(ctx, req.(*UserFileReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserFileService_DeleteUserFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserFileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserFileServiceServer).DeleteUserFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/userFileProto.UserFileService/DeleteUserFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserFileServiceServer).DeleteUserFile(ctx, req.(*UserFileReq))
	}
	return interceptor(ctx, in, info, handler)
}

// UserFileService_ServiceDesc is the grpc.ServiceDesc for UserFileService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserFileService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "userFileProto.UserFileService",
	HandlerType: (*UserFileServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SaveUserFile",
			Handler:    _UserFileService_SaveUserFile_Handler,
		},
		{
			MethodName: "DeleteUserFile",
			Handler:    _UserFileService_DeleteUserFile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "depart/user-file/proto/user-file.proto",
}
